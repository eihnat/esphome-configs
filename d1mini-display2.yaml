esphome:
  name: d1mini-display2
  platform: ESP8266
  board: d1_mini

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key


time:
  - platform: homeassistant
    id: esptime
  
sensor:
  - platform: homeassistant
    id: shelly1_power
    entity_id: sensor.shelly1_power
    internal: true
  - platform: homeassistant
    id: shelly2_power
    entity_id: sensor.shelly2_power
    internal: true
  - platform: homeassistant
    id: shelly3_power
    entity_id: sensor.shelly3_switch_0_power
    internal: true
  - platform: homeassistant
    id: shelly4_power
    entity_id: sensor.shelly4_switch_0_power
    internal: true
  - platform: homeassistant
    id: outside_temperature
    entity_id: sensor.teplotny_senzor
    internal: true
  


font:
  - file: 'arial.ttf'
    id: font1
    size: 18

  - file: 'BebasNeue-Regular.ttf'
    id: font2
    size: 36

  - file: 'arial.ttf'
    id: font3
    size: 9
    
i2c:
  sda: D2
  scl: D5
  scan: false

graph:
  # Show bare-minimum auto-ranged graph
  - id: simple_temperature_graph
    duration: 12h
    width: 126
    height: 42
    x_grid: 3h
    y_grid: 1.0   # degC/div
    sensor: outside_temperature
    line_type: DASHED
    line_thickness: 2
  - id: multi_power_graph
    duration: 3h
    x_grid: 1h
    y_grid: 50.0     # degC/div
    width: 126
    height: 42
    traces:
      - sensor: shelly1_power
        line_type: DASHED
        line_thickness: 2
      - sensor: shelly2_power
        line_type: DASHED
        line_thickness: 2
      - sensor: shelly3_power
        line_type: DASHED
        line_thickness: 2
      - sensor: shelly4_power
        line_type: DASHED
        line_thickness: 2


display:
  - platform: ssd1306_i2c
    model: "SH1106 128x64"
    reset_pin: D0
    address: 0x3C
    rotation: 180°
    contrast: 50%
    id: my_display
    pages:
      - id: page1
        lambda: |-
          if (id(outside_temperature).has_state()) {
            it.printf(128, 0, id(font3), TextAlign::TOP_RIGHT, "%.1f°c", id(outside_temperature).state);
          }
          it.strftime(0, 0, id(font1), TextAlign::TOP_LEFT, "%H:%M", id(esptime).now());      
          it.graph(0, 20, id(simple_temperature_graph));
      - id: page2
        lambda: |-
          if (id(shelly1_power).has_state()) {
            it.printf(0, 0, id(font3), TextAlign::TOP_LEFT, "S1: %.1fW", id(shelly1_power).state);
          }
          if (id(shelly2_power).has_state()) {
            it.printf(0, 10, id(font3), TextAlign::TOP_LEFT, "S2: %.1fW", id(shelly2_power).state);
          }
          if (id(shelly3_power).has_state()) {
            it.printf(123, 0, id(font3), TextAlign::TOP_RIGHT, "S3: %.1fW", id(shelly3_power).state);
          }
          if (id(shelly4_power).has_state()) {
            it.printf(123, 10, id(font3), TextAlign::TOP_RIGHT, "S4: %.1fW", id(shelly4_power).state);
          }          
          it.graph(0, 20, id(multi_power_graph));

interval:
  - interval: 15s
    then:
      - display.page.show_next: my_display
      - component.update: my_display

ota:
  password: !secret ota_password
  
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "D1Mini-Display2 Fallback Hotspot"
    password: !secret ap_password

captive_portal:

